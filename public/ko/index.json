[
{
	"uri": "/ko/",
	"title": "AWS General Immersion Day",
	"tags": [],
	"description": "",
	"content": "AWS General Immersion Day 실습 개요  AWS General Immersion Day에 오신 것을 환영합니다!\n AWS General Immersion Day는 AWS를 처음 접하는 사용자들을 위해, 기본적인 서비스들을 소개하는 세션과 가용성이 보장된 웹 어플리케이션을 구축하는 실습으로 구성되어 있습니다. 여기서는 본격적으로 실습을 진행하기에 앞서, 실습 전 수행해야 할 사전 준비 사항과 목표 구성을 설명합니다. 오늘 수행할 실습들은 본 문서를 포함하여 총 다섯 개의 부분으로 이루어져 있습니다.\n 개요 및 사전 준비사항 네트워크 – Amazon VPC 컴퓨트 – Amazon EC2 데이터베이스 – Amazon Aurora 스토리지 – Amazon S3  모든 실습들은 서로 유기적으로 연결되어 있습니다. 따라서 먼저 진행된 실습을 완료하지 못한 경우, 다음 실습 내용을 진행하기 어려울 수 있습니다.\n"
},
{
	"uri": "/ko/prerequisites/",
	"title": "개요 및 사전 준비사항",
	"tags": [],
	"description": "",
	"content": " AWS 관리 콘솔에 로그인하여 실습 환경을 준비합니다.\n 개요 오늘 실습을 통해 최종적으로 아래와 같은 구성의 웹 서비스를 만들 수 있습니다. 위 도면의 각 구성 요소와 역할에 대해서는 추후 각 실습 문서에서 설명할 예정입니다.\n사전 준비사항 원활한 실습을 위해, AWS 관리 콘솔에 접속하여 아래 내용을 확인해 주세요.\n  Lab Guide에 삽입된 Screenshot 들은 Lab 수행을 돕기 위하여 작성되었습니다. Lab 수행 중 생성하는 각각의 요소들의(VPC, NAT Gateway 및 EIP 등) 식별자(ID)는 사용자 계정마다 다릅니다.\n  빠른 응답 속도를 위하여 가장 가까운 리전(Region)을 선택하여 진행하기를 권장합니다. (서울 리전)   자주 사용하는 서비스를 쉽게 사용할 수 있도록 상단 메뉴 바에 배치할 수 있습니다. 화면 상단의 Pin 아이콘을 선택하고, 자주 사용하는 서비스를 끌어 메뉴 상단에 배치하세요.   본 실습 문서는 영어(미국) AWS 관리 콘솔을 기준으로 작성되었습니다. 관리 콘솔 맨 아래쪽의 언어 선택 메뉴를 통하여 원하는 언어로 전환할 수 있습니다.   모두 준비가 되셨나요? 이제 본격적인 실습을 진행해 보겠습니다.\n"
},
{
	"uri": "/ko/network/",
	"title": "네트워크 – Amazon VPC",
	"tags": [],
	"description": "",
	"content": " 본 Hands-On Lab에서는 VPC Wizard를 통하여 Public 및 Private Subnet을 2개의 AZ에 각각 하나씩 생성하고, 하나의 Public Subnet에 NAT 게이트웨이를 구성합니다. 이후 라우팅 테이블을 설정하여 트래픽 흐름을 정의하게 됩니다. 이와 같은 작업을 통해 추후 고가용성이 보장된 EC2 기반의 웹 서비스 환경을 위한 기본 네트워킹 구성을 완료합니다.\n Lab Guide에 삽입된 Screenshot 들은 Lab 수행을 돕기 위하여 작성되었습니다. Lab 수행 중 생성하는 각각의 요소들의(VPC, NAT Gateway 및 EIP 등) 식별자(ID)는 사용자 계정마다 다르다는 것을 인지 하시기 바랍니다.\n 목표 구성도 본 실습을 통하여 구축하고자 하는 최종 구성도는 아래와 같습니다.\n실습 순서  VPC 생성 VPC에서 추가 서브넷 생성  "
},
{
	"uri": "/ko/network/create_vpc/",
	"title": "VPC 생성",
	"tags": [],
	"description": "",
	"content": " Amazon Virtual Private Cloud(Amazon VPC)에서는 사용자가 정의한 가상 네트워크로 AWS 리소스를 시작할 수 있습니다. 이 가상 네트워크는 AWS의 확장 가능한 인프라를 사용한다는 이점과 함께 고객의 자체 데이터 센터에서 운영하는 기존 네트워크와 매우 유사합니다.\n VPC 서비스로 이동 AWS Management Console로 Login 한 후, Service 메뉴에서 VPC 를 선택합니다.\n만약 아래 스크린샷과 보시고 계신 화면이 다르다면, 좌측 위 New VPC Experience 토글을 활성화 해 주십시오.\n 탄력적 IP 생성 화면 좌측의 VPC Dashboard에서 탄력적 IP(Elastic IPs) 를 선택하고 새 주소 할당(Allocate Elastic IP Address) 을 클릭 하십시오. 이것은 VPC Wizard를 통하여 생성할 NAT Gateway에 할당하기 위하여 미리 생성하는 것입니다.\n탄력적 IP(Elastic IP)는 사용자 계정(Account)에 고정적으로 할당되며, 인스턴스의 상태에 관계 없이 지속적으로 할당되는 IP를 의미하며, Public IP이므로 외부에서 접근이 가능한 IP입니다. NAT Gateway에 사용할 고정된 Public IP를 위하여 생성합니다.\n할당(Allocate) 을 선택하십시오.\n사용자 계정(Account)에 할당된 새로운 탄력적 IP(Elastic IP)를 확인 할 수 있습니다.\nVPC 마법사를 이용한 VPC 생성 VPC 대시보드(Dashboard) 를 선택하고, VPC 마법사 시작(Launch VPC Wizard) 을 클릭하여 VPC 생성 마법사를 시작합니다.\n  Step 1: Select a VPC Configuration 화면에서 2번째 Option인 VPC with Public and Private Subnets 를 선택하십시오. VPC 마법사가 화면상의 그림과 같이 Private Subnet에 있는 EC2 인스턴스가 Internet에 Access할 수 있도록 NAT Gateway를 자동으로 생성합니다. NAT Gateway에 대해서는 이후에 자세히 다루도록 하겠습니다.\n  Step 2: VPC with Public and Private Subnets 설정 화면에서 아래의 값을 VPC name, Public subnet\u0026rsquo;s IPv4 CIDR, Availability Zone, Public subnet name, Private subnet\u0026rsquo;s IPv4 CIDR, Availability Zone, Private subnet name 에 입력 하십시오. 퍼블릭 서브넷(Public Subnet)은 EC2인스턴스에 Public IP가 할당되어 Internet Gateway를 통하여 직접 인터넷에 인바운드 / 아웃바운드 접근이 가능한 Subnet이고, 프라이빗 서브넷(Private Subnet)은 Public IP가 할당되지 않으나, NAT Gateway를 통하여 인터넷에 아웃바운드 접근이 가능한 Subnet입니다.\n     키 값     IPv4 CIDR block 10.0.10.0/16   VPC name VPC-Lab   Public subnet’s IPv4 CIDR 10.0.10.0/24   Availability Zone ap-northeast-2a   Public subnet name Public subnet A   Private subnet’s IPv4 CIDR 10.0.100.0/24   Availability Zone ap-northeast-2a   Private subnet name Private subnet A     NAT Gateway에 할당할 탄력적 IP지정을 위하여 Elastic IP Allocation ID 를 선택하십시오. 사용 가능한 탄력적 IP가 표시될 것이며, Lab 도입부에서 NAT Gateway를 위하여 생성한 탄력적 IP(Elastic IP)의 할당 ID(Allocation ID)를 선택합니다. 모든 설정이 지정되었으면 Create VPC 를 클릭 하십시오.\n  VPC 생성 마법사는 Subnet과 NAT Gateway를 자동으로 생성합니다. 생성이 완료되면 확인(OK) 버튼을 클릭하십시오.\n  여기까지 완료되었다면, 현재까지 구성된 환경은 아래와 같습니다.\n"
},
{
	"uri": "/ko/network/create_subnet/",
	"title": "VPC에서 추가 서브넷 생성",
	"tags": [],
	"description": "",
	"content": " 고가용성 및 Fault Tolerant한 네트워크 서비스 구성을 위해, VPC의 Availability Zone C를 사용하겠습니다. 여기에 퍼블릭, 프라이빗 서브넷을 하나씩 더 추가하고, 라우팅 테이블을 설정하겠습니다.\n 다른 가용영역(az-northeast-2c)에 퍼블릭 서브넷 생성 VPC 콘솔 왼쪽 화면의 Subnet 을 클릭하고, 상단의 Create subnet 을 클릭합니다.\nCreate Subnet 란에서 Name tag, VPC, Availability Zone, IPv4 CIDR block을 아래의 값으로 지정해 줍니다.\n   키 값     Name tag Public subnet C   VPC VPC란을 클릭해서 VPC-Lab 태그가 설정된 VPC를 선택합니다.   Availability Zone ap-northeast-2c   IPv4 CIDR block 10.0.20.0/24    우측 하단의 Create 버튼을 누르고 Puiblic subnet C 서브넷을 생성합니다.\n다른 가용영역(az-northeast-2c)에 프라이빗 서브넷 생성 마찬가지로 프라이빗 서브넷인 Private subnet C 도 생성해 보겠습니다.\n   키 값     Name tag Private subnet C   VPC VPC란을 클릭해서 VPC-Lab 태그가 설정된 VPC를 선택합니다.   Availability Zone ap-northeast-2c   IPv4 CIDR block 10.0.200.0/24    Create 버튼을 눌러 Private subnet C 도 생성합니다.\n생성된 서브넷 확인 VPC의 Subnet 메뉴를 클릭하고, 필터에 VPC-Lab 을 입력하면 아래와 같이 4개의 서브넷을 볼 수 있습니다.\n라우팅 테이블 수정 Routing Table 을 선택하면 생성된 모든 라우팅 테이블을 확인할 수 있으며, 라우팅 테이블을 변경하거나 해당 라우팅 테이블에 Subnet을 연결(Association)하는 작업을 할 수 있습니다. 여기서는 새로 생성한 두 개의 서브넷에 적합한 라우팅 테이블을 연결해 주겠습니다.\n먼저, VPC 메뉴 좌측의 Route Tables 을 클릭합니다. 가운데 검색 창을 클릭 후 리소스 속성에서 VPC 를 선택하여, 방금 생성한 VPC ID 를 찾아 필터를 겁니다.\n필터링이 되고 나면 두 개의 라우팅 테이블이 보일 겁니다. 일단 Explicit subnet associations 에 서브넷이 연결되어 있는 라우팅 테이블부터 살펴보겠습니다. 해당 라우팅 테이블을 클릭하면, 아래에 세부 사항이 표시됩니다.\nRoutes 탭을 눌러, 이 라우팅 테이블의 설정을 확인하겠습니다.\n목적지가 VPC 내부(10.0.0.0/16)인 경우 로컬 게이트웨이(local)로 트래픽을 라우팅하고, 그 외 다른 모든 목적지(0.0.0.0/0)의 트래픽을 인터넷 게이트웨이(igw-xxx)로 보내는 라우팅 테이블입니다. 인터넷과 바로 통신이 가능한 라우팅 구성이므로, 퍼블릭 서브넷들에 적용되어야 하는 라우팅 테이블이네요. Subnet Association 탭을 눌러 보겠습니다.\n서브넷 연결을 확인해 보니, 10.0.10.0/24 의 주소 공간을 갖는 Public subnet A 만 해당 라우팅 테이블에 연결되어 있는 것을 볼 수 있습니다. 우리가 새로 만든 Public subnet C 역시 해당 라우팅 테이블의 규칙을 따라 0.0.0.0/0 으로의 트래픽을 인터넷 게이트웨이로 보내야 합니다. Edit subnet associations 을 눌러 Public Subnet C 도 해당 라우팅 테이블에 연결해 보겠습니다.\nEdit subnet associations 창의 가운데 서브넷 ID란을 보면, Public subnet C가 선택되지 않은 것을 보실 수 있습니다. Public subnet C 의 좌측 체크박스 를 눌러 연결 설정을 해 준 뒤, 우측 하단의 Save 버튼을 누릅니다.\n이제 해당 라우팅 테이블에 Public subnet A, C가 연결된 것을 확인할 수 있습니다. 추후 혼선을 방지하기 위해, 라우팅 테이블의 Name 을 눌러 Public route 라고 라우팅 테이블에 이름을 붙여 주겠습니다.\n이제 프라이빗 서브넷들을 위한 라우팅 테이블을 수정해 보겠습니다. 현재 보이는 두 개의 라우팅 테이블 중, 이름이 없는 라우팅 테이블 을 클릭하고 라우트(Routes) 탭을 선택합니다.\n목적지가 VPC 내부(10.0.0.0/16)인 경우 로컬 게이트웨이(local)로 트래픽을 라우팅하고, 그 외 다른 모든 목적지(0.0.0.0/0)의 트래픽을 NAT 게이트웨이(nat-xxx) 로 보내는 라우팅 테이블입니다. NAT 게이트웨이를 사용하도록 한 서브넷이므로 프라이빗 서브넷들에 적용되어야 하는 라우팅 테이블이네요. Subnet Associations 탭을 눌러 보겠습니다.\n서브넷 연결을 확인해 보니 아무 서브넷도 연결되어 있지 않네요. Edit subnet associations 을 눌러 Private subnet A, C 를 해당 라우팅 테이블에 연결하겠습니다.\n앞서 퍼블릭 서브넷을 연결했던 것과 마찬가지로, Private subnet A와 C의 체크 박스 를 클릭하고 우측 하단 Save 버튼을 누릅니다. 프라이빗 서브넷 2개가 해당 라우팅 테이블에 잘 연결되었는지 확인 후, Name을 눌러 Private route 라고 라우팅 테이블의 이름을 지정해 줍니다.\n자, 이제 기본적인 네트워크 구성이 완료되었습니다. 현재까지 구성한 자원들을 개념적으로 도면에 표시해 보면 아래 그림과 같습니다.\n"
},
{
	"uri": "/ko/compute/",
	"title": "컴퓨트 – Amazon EC2",
	"tags": [],
	"description": "",
	"content": " Amazon Elastic Compute Cloud(Amazon EC2)는 안전하고 크기 조정이 가능한 컴퓨팅 파워를 클라우드에서 제공하는 웹 서비스입니다. 개발자가 더 쉽게 웹 규모의 클라우드 컴퓨팅 작업을 할 수 있도록 설계되었습니다. Amazon EC2의 간단한 웹 서비스 인터페이스를 통해 간편하게 필요한 용량을 얻고 구성할 수 있습니다. 컴퓨팅 리소스에 대한 포괄적인 제어권을 제공하며, Amazon의 검증된 컴퓨팅 환경에서 실행할 수 있습니다.\n 목표 구성도 본 Computing Lab은 앞서 Networking Lab에서 생성한 VPC내 Private subnet들에 Auto Scaling Group을 이용하여 웹 서비스 인스턴스를 배포합니다. 이를 통해 고가용성이 보장되는 Web Service를 구성하여 외부 사용자가 Web Browser를 통하여 Sample Web Page에 접근할 수 있도록 구성합니다.\n본 Lab은 아래의 내용을 포함하고 있습니다.\n 웹 서버 인스턴스 시작(Launching) 및 사용자 지정 데이터(User Data)의 실행 보안 그룹(Security Group)의 설정 커스텀 AMI(Amazon Machine Image) 생성 ALB(Application Load Balancer) 생성 시작 템플릿(Launch Configuration) 구성 Auto Scaling Group 구성 Auto Scaling 테스트 및 수동 설정 변경  실습 순서 2-1. 웹 서버 인스턴스의 시작\n2-2. 오토 스케일링 웹 서비스 배포\n2-3. 웹 서비스 확인 및 테스트\n2-4. 부록 - 추가적인 EC2 개념들\n본 Lab Guide는 영어 AWS 관리 콘솔을 기준으로 작성되었습니다. EC2 Dashboard의 좌측 상단의 New EC2 Experience 탭이 활성화 상태인지 확인해 주십시오.\n "
},
{
	"uri": "/ko/compute/launching/",
	"title": "웹 서버 인스턴스의 시작",
	"tags": [],
	"description": "",
	"content": " 이 과정에서는 기본 Amazon Linux 인스턴스를 시작하고, 초기화 과정에서 Apache/PHP Web Server를 자동으로 구성하도록 합니다.\n 인스턴스 생성   좌측 메뉴 상단의 EC2 Dashboard를 클릭합니다.\n  Launch instance 버튼을 누르고, 메뉴에서 Launch instance 를 선택합니다.\n  [Step 1. Choose AMI] 의 Quick Start 탭에서 Amazon Linux 2 AMI를 선택하십시오. Amazon Linux AMI가 아니라 Amazon Linux 2 AMI 입니다.\n  [Step 2. Choose Instance Type] 에서 t2.micro를 선택하고 Next: Configure Instacne Details을 클릭 하십시오.\n  [Step 3. Configure Instance] 에서 아래와 같이 설정합니다.\n     키 값     Network VPC-Lab 태그가 붙어 있는 VPC를 선택합니다.   Subnet 드롭 다운 메뉴에서 Public subnet A를 찾아 선택합니다.   Auto-assign Public IP Enable    나머지 모든 값들은 기본값을 사용하고, 화면 하단의 Advanced Details를 클릭하여 확장하십시오. User data 입력란에 아래의 내용을 입력한 후, Next: Add Storage를 선택 하십시오.\n#include https://go.aws/38GIqcB \n또는 아래와 같이 쉘 스크립트를 직접 입력한 후 Next: Add Storage를 선택 하십시오.\n#!/bin/sh\ryum -y install httpd php mysql php-mysql\rchkconfig httpd on\rsystemctl start httpd\rif [ ! -f /var/www/html/bootcamp-app.tar.gz ]; then\rcd /var/www/html\rwget https://s3.amazonaws.com/awstechbootcamp/GettingStarted/bootcamp-app.tar.gz\rtar xvfz bootcamp-app.tar.gz\rchown apache:root /var/www/html/rds.conf.php\rfi\ryum -y update\r 사용자 데이터(User Data)는 최초 인스턴스 생성시 실행되는 사용자 정의 초기화 스크립트 입니다.\n  [Step 4. Add Storage] 에서 인스턴스에 할당하는 OS Volume(EBS Volume)을 정의합니다. 기본 값인 8GB(SSD Type)를 그대로 사용합니다. Next: Add Tags를 클릭하여 다음 단계로 진행합니다.\n  [Step 5: Add Tags] 에서 인스턴스를 식별할 수 있는 다양한 정보를 추가할 수 있습니다. 태그 정보를 통하여 사용자는 인스턴스의 용도, 목적, 비용 관련 정보 등을 손쉽게 확인 할 수 있습니다. Add Tag를 클릭하고, 키와 값을 아래와 같이 입력합니다. 완료되면 Next: Configure Security Group을 클릭하십시오.\n     키 값     Key Name   Value Web server for custom AMI    [Step 6: Configure Security Group] 에서는 새로운 보안 그룹을 만들거나 기존에 만들어진 보안 그룹을 선택 할 수 있습니다. 보안 그룹은 방화벽 정책으로 허용하고자 하는 프로토콜과 주소를 지정하게 됩니다. Lab을 위하여 새로운 보안 그룹을 생성하고 이름을 지정합니다.  Security group name에 Immersion Day - Web Server를 입력 후, Add Rule를 선택하여 Web Service를 위한 TCP/80도 함께 허용합니다. 추가된 행의 Type에 HTTP를 지정하면 됩니다. 소스 주소의 0.0.0.0/0은 모든 네트워크에서의 접근을 의미합니다.\nReview and Launch을 클릭하여 전체 구성을 확인합니다.\n [Step 7. Review] 에서 앞서 구성한 정보를 확인하고 Launch을 선택하여 인스턴스를 시작하십시오.\n  키 페어 선택 화면에서 Proceed without a key pair를 선택합니다. 아래 체크박스를 선택 후, Launch Instances를 클릭합니다.\n  화면 하단의 인스턴스 보기를 선택하여 EC2인스턴스의 목록을 확인할 수 있습니다. 인스턴스의 시작이 완료되면 인스턴스가 구동되고 있는 가용 영역, 외부에서 접근 가능한 IP 및 DNS 정보를 확인 할 수 있습니다.\n  웹 서비스 접속   인스턴스의 Status Check 결과가 2/2 checks passed가 될 때 까지 대기 하십시오. 초기화가 완료되면 2/2 checks passed로 변경됩니다.\n  새로운 웹 브라우저 탭을 열고 URL 주소 입력하는 영역에, EC2 인스턴스의 퍼블릭 DNS 또는 IPv4 퍼블릭 IP를 입력하십시오. 아래와 같이 페이지가 보여지면 웹 서버 인스턴스가 정상적으로 구성된 것입니다.\n  인스턴스 접속   EC2 인스턴스 콘솔로 들어갑니다. 접속하고자 하는 인스턴스를 선택한 뒤, 가운데 Connect 버튼을 누릅니다.\n  Connect your instance 창에서 Connection method를 EC2 Instance Connect로 선택한 뒤, 오른쪽 아래 Connect 버튼을 누릅니다.\n  잠시 기다리고 나면, 아래와 같이 브라우저 기반 SSH 콘솔을 사용하실 수 있습니다. 테스트 후 창을 닫으면 됩니다.\n커스텀 AMI 생성 AWS EC2 콘솔에서는 생성된 인스턴스를 이용하여 이미지를 만들고, 추후 인스턴스 생성 시 이 이미지를 사용할 수 있습니다. 이를 커스텀 AMI라고 부릅니다. 여기서는 앞서 생성한 웹 서버 인스턴스를 이용하여 AMI를 만들어 보겠습니다.\nEC2 콘솔에서 아까 생성한 인스턴스를 선택하고, Actions -\u0026gt; Image -\u0026gt; Create Image 를 선택합니다.\nCreate Image 창에서 아래와 같이 입력합니다.\n   키 값     Image name Web Server v1   Image description LAMP web server AMI    이후 Create image를 눌러 이미지를 생성합니다.\n이미지 생성 요청이 완료되었다는 창에서 Close를 누르고, 좌측 콘솔 메뉴에서 IMAGES 아래 AMIs 버튼을 찾아 클릭합니다. 방금 요청한 AMI가 생성 중인 것을 보실 수 있습니다.\n생성이 완료되면 아래와 같이 Status가 Available로 변경됩니다.\n인스턴스 종료(Terminate) 커스텀 AMI 생성을 완료하였으니 이제 기존의 EC2 인스턴스를 종료(Termination)해 보도록 하겠습니다.\n EC2 대시보드에서 Instances 탭으로 들어갑니다. 삭제하고자 하는 인스턴스를 선택합니다. 이후 Actions -\u0026gt; Instance state -\u0026gt; Terminate 를 클릭합니다. 경고 창이 뜨면, Yes, Terminate를 눌러 삭제합니다. Instance State가 Shutting down으로 변경됩니다. 이후 곧 terminated로 변경됩니다. 삭제가 완료되었습니다.  "
},
{
	"uri": "/ko/compute/auto_scaling/",
	"title": "오토 스케일링 웹 서비스 배포",
	"tags": [],
	"description": "",
	"content": " AWS Auto Scaling은 애플리케이션을 모니터링하고 용량을 자동으로 조정하여, 최대한 저렴한 비용으로 안정적이고 예측 가능한 성능을 유지합니다. AWS Auto Scaling을 사용하면 몇 분 만에 손쉽게 여러 서비스 전체에서 여러 리소스에 대해 애플리케이션 규모 조정을 설정할 수 있습니다.\n 이제 앞서 Networking Lab에서 생성한 네트워크 인프라 위에 부하에 따라 자동적으로 Scale out/in 이 가능하고 고가용성이 보장되는 웹 서비스를 배포해 보겠습니다. 여기서는 이전 장에서 만들어 둔 웹 서버 AMI와 VPC Lab에서 구성한 네트워크 인프라를 사용할 예정입니다.\nApplication Load Balancer 구성 AWS Elastic Load Balancing은 Application Load Balancer, Network Load Balancer, Classic Load Balancer의 세 가지 유형의 로드 밸런서를 지원합니다. 본 실습에서는 HTTP 요청을 부하 분산 처리하는 Application Load Balancer를 구성하고 설정하도록 해 보겠습니다.\nALB 생성   EC2 관리 콘솔로 들어갑니다. 좌측 메뉴에서 스크롤을 내려 Load Balancing 항목 아래 Load Balancers 를 클릭하고, 가운데 위의 Create Load Balancer 를 클릭합니다.\n  Select load balancer type 창에서 Application Load Balancer 의 Create 버튼을 클릭합니다.\n  [Step 1: Configure Load Balancer] 에서 로드 밸런서의 이름을 정해 줍니다. 여기서는 Name에 Web-ALB로 이름을 지정해 줍니다. 다른 설정들은 기본값으로 둡니다. 기본 설정은 인터넷으로부터 80 port로 들어오는 HTTP 연결을 ALB가 Listening 하도록 되어 있습니다.\n  스크롤을 조금 내리면, 가용 영역을 설정하는 란이 나옵니다. 사전에 구성한 VPC가 VPC-Lab 으로 선택되어 있는지 확인한 후, 로드 밸런서가 사용할 Availability Zones 의 ap-northeast-2a를 선택하고, Public subnet A를 찾아 지정합니다. 마찬가지로 ap-northeast-2c도 선택하고 Public subnet C를 지정해 줍니다. 우측 하단 Next: Configure Security Settings을 눌러 다음 단계로 넘어갑니다.\n  [Step 2: Configure Security Settings] 에서 HTTPS를 사용하는 보안 리스너를 구성하라는 경고 메시지가 나옵니다. 이 실습에서는 편의를 위하여 HTTP 리스너를 사용할 예정입니다. 바로 Next: Configure Security Groups 버튼을 눌러 넘어갑니다.\n  [Step 3: Configure Security Groups] 에서 ALB에 적용될 보안 그룹을 설정합니다. 먼저 Assign a security group 란에 Create a new security group 를 선택하고, Security group name 에 Web-ALB-SG 를 입력합니다. 그리고 Type 드롭다운 메뉴에서 HTTP를 찾아 선택합니다. 완료되었으면 Next: Configure Routing 버튼을 눌러 다음 단계로 넘어갑니다.\n  [Step 4: Configure Routing] 에서 위에서 설정한 리스너가 트래픽을 넘겨줄 대상 그룹을 설정합니다. 현재 우리는 아직 트래픽을 받아 처리해 줄 인스턴스가 없는 상태입니다. 일단 Name만 Web-TG 로 만들고 Next: Register Targets 버튼을 누르고 다음 단계로 넘어갑니다.\n  [Step 5: Register Targets] 단계입니다. 하지만 앞서 말씀드린 것처럼 현재 등록할 타겟이 없습니다. Next: Review 를 눌러 넘어갑니다.\n  [Step 6: Review] 에서 현재까지 구성한 설정을 확인해 볼 수 있습니다. 이상이 없는 것을 확인한 후, 오른쪽 아래 Create 버튼을 클릭하여 생성 설정을 완료합니다.\n  로드 밸런서 생성이 완료되었습니다. Close 를 눌러 생성 화면을 종료합니다.\n  시작 템플릿 구성 ALB를 만들었으니 이제 로드 밸런서 뒤에 인스턴스들을 배치할 차례입니다. Auto Scaling Group에서 시작할 Amazon EC2 인스턴스를 구성하려면 시작 템플릿, 시작 구성, 또는 EC2 인스턴스 를 사용할 수 있습니다. 여기서는 시작 템플릿을 사용하여 Auto Scaling 그룹을 생성해 보겠습니다.\n시작 템플릿은 한 리소스 내의 모든 시작 파라미터를 한꺼번에 구성하도록 되어 있어 인스턴스 생성에 필요한 단계 수를 줄입니다. 또한 시작 템플릿은 Auto Scaling, 스팟 집합, 스팟 및 온디맨드 인스턴스에 대한 지원을 통해 Best Practice 를 더욱 쉽게 구현할 수 있습니다. 이를 통해 비용을 보다 편리하게 관리하고 보안을 향상시키며, 배포 오류 위험을 최소화하는 데 도움이 됩니다.\n시작 템플릿에는 AMI 및 인스턴스 유형과 같이 Amazon EC2가 인스턴스를 시작하는 데 필요한 정보가 포함되어 있습니다. Auto Scaling 그룹은 이를 참조하여 확장(Scale out) 이벤트가 발생할 때 새로운 인스턴스들을 추가하게 됩니다. 만약 Auto Scaling 그룹에서 시작할 EC2 인스턴스의 구성을 변경해야 한다면, 시작 템플릿의 새 버전을 생성하여 Auto Scaling 그룹에 지정하면 됩니다. 필요에 따라 Auto Scaling 그룹에서 EC2 인스턴스를 시작하는 데 사용하는 시작 템플릿의 특정 버전을 선택할 수도 있습니다. 이 설정은 언제든지 변경할 수 있습니다.\n보안 그룹 생성 시작 템플릿을 만들기 전에, 시작 템플릿을 통해 생성되는 인스턴스들이 사용할 보안 그룹을 만들어 보겠습니다. EC2 콘솔의 좌측 메뉴에서 Network \u0026amp; Security 칸의 Security Groups를 선택하고, 우측 상단의 Create Security Group을 클릭합니다.\n 보안 그룹 생성 화면에서 아래 내용들을 채워 넣습니다.     키 값     Security Group Name ASG-Web-Inst-SG   Description HTTP Allow   VPC VPC-Lab    스크롤을 내려 인바운드 룰을 수정해 줍니다. 먼저 Add rule 을 눌러 인바운드 룰 수정 창을 추가하시고, Type에는 HTTP를 입력합니다. Source로는 검색창에 ALB라고 입력하시면 ALB 생성 시 만든 보안 그룹이 검색됩니다. 이를 클릭하여, ALB에서 들어오는 HTTP 트래픽만 받도록 보안 그룹을 구성해 줍니다.     키 값     Type HTTP   Source Web-ALB-SG (클릭하고 나면 sg-xxxx 형태로 변경됨)    Outbound rules는 기존 설정 그대로 두고, 오른쪽 아래 Create Security Group 버튼을 눌러 보안 그룹을 생성해 줍니다. 이를 통해 인터넷에서 ALB를 통해 인스턴스로 들어오는 HTTP 연결(TCP 80)에 대해서만 트래픽을 허용하는 보안 그룹을 생성하였습니다.  시작 템플릭 생성   EC2 콘솔에 접속, 좌측 메뉴에서 Launch Templates을 찾아 선택하고, Create Launch Template을 클릭합니다.\n  시작 템플릿 설정을 하나하나 진행해 보겠습니다. 먼저 Launch template name과 Template version description을 아래와 같이 설정하고, Auto Scaling guidance의 Provide guidance…. 항목의 체크박스를 선택합니다. 이 체크박스를 선택하여 생성하는 템플릿이 Amazon EC2 Auto Scaling에서 활용되도록 설정합니다.\n     키 값     Launch template name Web   Template version description Immersion Day Web Instances Template – Web only   Auto Scaling guidance Provide guidance to help me set up a template that I can use with EC2 Auto Scaling 체크 박스 클릭    아래로 스크롤을 내려 시작 템플릿 콘텐츠를 설정합니다. Amazon Machine Image(AMI) 란에는 이전 EC2 Hands-on Lab에서 만든 AMI를 찾아 설정합니다. 검색 창에 Web Server v1 이라고 입력하여 찾으시거나, 스크롤을 내려 내 AMI 란에서 찾으실 수 있습니다. 다음으로 인스턴스 유형에는 t2.micro를 입력하여 선택해 줍니다. 서비스용 웹 서버를 올리는 것이므로 SSH 접근은 하지 않을 예정입니다. 따라서 키 페어는 사용하지 않습니다.     키 값     AMI Web Server v1   Instance Type t2.micro    다른 부분들은 기본값으로 두고, Network Settings 부분을 보겠습니다. 먼저 Networking platform 란에서 Virtual Private Cloud(VPC)를 선택합니다. 보안 그룹 란에는 검색 창에 ASG-Web-Inst-SG를 입력하여 앞서 만든 보안 그룹을 선택해 주겠습니다.     키 값     Networking platform Virtual Private Cloud(VPC   Security groups ASG-Web-Inst-SG    Storage는 별도 설정 없이 기본값을 따르겠습니다. 아래로 내려가 Instance tags를 정의하겠습니다. Add tag를 누르고, Key에 Name을, Value에 Web Instance를 입력해 줍니다. Tag volumes도 클릭하여 선택해 줍니다.     키 값     Key Virtual Private Cloud(VPC   Value ASG-Web-Inst-SG   Tag Volumes volumes 체크 박스 클릭     이외의 다른 설정들은 모두 기본값으로 두고, 우측 하단의 Create launch template 버튼을 눌러 시작 템플릿을 생성합니다.\n  다음 단계에서 View launch template 를 누르시면 아래와 같이 시작 템플릿이 생성된 것을 확인하실 수 있습니다.\n  Auto Scaling Group 구성 자, 이제 Auto Scaling Group 을 만들어 보겠습니다.\n  먼저 EC2 콘솔로 들어가 좌측 메뉴 맨 하단의 Auto Scaling Groups를 선택합니다. 그리고 Create Auto Scaling group 버튼을 눌러 Auto Scaling Group을 생성합니다.\n  Step 1에서는 먼저 Auto Scaling 그룹의 이름을 지정합니다. 여기서는 Web-ASG라고 지정해 보겠습니다. 이후 아래의 시작 템플릿 란에서 방금 만든 템플릿, Web을 선택해 줍니다. 시작 템플릿의 기본 설정들이 아래로 펼쳐져 보입니다. 확인 후 우측 하단 Next 버튼을 누릅니다.\n     키 값     Auto Scaling 그룹 이름 Web-ASG   시작 템플릿 Web    Configure settings단계에서는 Purchasing options and instance types는 기본값으로 두고 네트워크 구성을 설정합니다. VPC에는 VPC-Lab을 선택하고, Subnets 란에 Private subnet A와 Private subnet C를 골라줍니다. 설정이 완료되면 Next 버튼을 누릅니다.     키 값     VPC VPC-Lab   Subnets Private subnet A, Private subnet C    다음으로는 로드 밸런싱 설정을 진행합니다. 먼저 Enable load balancing 버튼을 누르고, Application Load Balancer or Network Load Balancer를 선택합니다. 이후 Choose a target group for your load balancer란에서 ALB 생성 시 만든 Web-TG를 선택합니다. 맨 아래쪽의 Monitoring에서 Enable group metrics collection within CloudWatch의 체크 박스를 선택합니다. 이를 통해 Auto Scaling 그룹의 상태를 확인할 수 있는 그룹 지표(Metric)을 CloudWatch에서 확인할 수 있도록 합니다. 우측 하단의 Next 버튼을 누릅니다.     키 값     Enable load balancing Application Load Balancer or Network Load Balancer 체크 박스 클릭   Choose a target group for your load balancer Web-TG   Monitoring Enable group metrics collection within CloudWatch 체크 박스 클릭    Configure group size and scaling policies단계에서는 Auto Scaling 그룹의 Scaling 정책을 구성합니다. Group size 란에서 Desired capacity, Minimum capacity를 각각 2로 지정하고, Maximum capacity를 4로 지정합니다. 인스턴스 수를 평상시 2개로 유지하고, 정책에 따라 최소 2개, 최대 4개까지의 스케일링을 허용합니다.     키 값     Desired capacity 2   Minimum capacity 2   Maximum capacity 4    아래 조정 정책 란에서는 Target tracking scaling policy을 선택하고, Target value에 30을 입력합니다. CPU 평균 사용률이 전체 30%가 유지될 수 있도록 인스턴스 수를 조정하는 정책입니다. 다른 설정들은 모두 기본값으로 두고, 우측 하단 Next 버튼을 누릅니다.     키 값     Target tracking scaling policy 체크 박스 선택   Target value 30     Add notifications단계는 기본값으로 둔 채 Next를 눌러 넘어갑니다.\n  Add tags 단계에서는 간단히 이름 태그를 지정하겠습니다. Add tag를 누르고, Key에 Name을, Value에 ASG-Web-Instance를 입력한 후 Next을 클릭합니다.\n     키 값     Key Name   Value ASG-Web-Instance     이제 마지막 검토 단계입니다. 관련된 설정들을 리뷰한 후, 우측 하단의 Create Auto Scaling Group 버튼을 눌러 주세요.\n  Auto Scaling 그룹이 만들어졌습니다. Auto Scaling 그룹 콘솔에서 아래와 같이 생성된 Auto Scaling 그룹을 확인할 수 있습니다.\n  Auto Scaling 그룹을 통해 생성된 인스턴스들은 EC2 인스턴스 메뉴에서도 확인해 볼 수 있습니다.\n  자, 이제 고가용성이 확보된, 부하에 따라 자동적으로 스케일링되는 웹 서비스를 구축하였습니다! 지금까지 만든 서비스의 구성도는 아래와 같습니다:\n"
},
{
	"uri": "/ko/compute/test_service/",
	"title": "웹 서비스 확인 및 테스트",
	"tags": [],
	"description": "",
	"content": "웹 서비스 및 로드 밸런서 동작 확인 이제 구성한 서비스가 정상적으로 동작하는지 테스트해 보겠습니다. 먼저 정상적으로 웹 사이트에 접속 가능한지, 로드 밸런서가 동작하는지 확인한 후, 웹 서버에 부하를 주어 Auto Scaling이 동작하는지 확인해 보겠습니다.\n   해당 웹 서비스에 구성한 Application Load Balancer를 통해 접속하기 위해, EC2 콘솔에서 Load Balancers 메뉴를 클릭하고, 아까 생성한 Web-ALB를 선택해 줍니다. 여기서 기본 구성의 DNS 이름 을 복사해 줍니다.\n  브라우저에서 새 탭을 열고 복사한 DNS 이름 을 붙여 넣습니다. 아래와 같이 EC2 Lab에서 본 웹 서비스가 동작하는 것을 확인할 수 있습니다. 아래 그림의 경우 ap-northeast-2a 의 웹 인스턴스에서 해당 웹 페이지를 서비스하고 있다는 것을 확인할 수 있습니다.\n  여기서 새로 고침 버튼을 눌러 보면, 아래와 같이 웹 페이지를 서비스하는 호스트가 다른 가용 영역의 인스턴스 로 바뀐 것을 볼 수 있습니다. 이는 ALB 타겟 그룹의 라우팅 알고리즘이 기본적으로 Round Robin 방식으로 동작하기 때문입니다.\n  현재 Auto Scaling 그룹에는 각 인스턴스의 CPU 사용률 30%가 조정 목표로 설정되어 있습니다. 이 경우,\n인스턴스들의 평균 CPU 사용률이 30% 미만인 경우 인스턴스 숫자를 줄이고,\n인스턴스들의 평균 CPU 사용률이 30%를 넘어가면 인스턴스를 추가 배치, 부하를 분산하여\n인스턴스들의 평균 CPU 사용률이 30%가 되도록 조정 정책이 동작합니다.\n  이제 실제로 부하를 주어 Auto Scaling이 잘 동작하는지 확인해 보겠습니다. 상기 웹 페이지에서 LOAD TEST 메뉴를 클릭합니다. 화면이 바뀌고 가해진 부하가 보입니다. 페이지 좌측 상단의 로고를 클릭해 보면 각 인스턴스에 부하가 걸린 것을 확인할 수 있습니다.\n  CPU 부하를 발생시키는 원리는 CPU Idle 값이 50이 넘어가면, 임의의 파일을 만들고 압축하고 압축을 해제하는 작업을 하도록 PHP 코드가 5초 주기로 동작합니다. ALB에 의해서 트래픽이 분산되어 동작되기 때문에 부하를 걸어주고 나면 계속적으로 다른 인스턴스에도 부하가 발생하게 됩니다.\n  EC2 콘솔의 좌측 메뉴에서 Auto Scaling Groups에 들어가, Monitoring 탭을 누릅니다. 아래 Enabled metrics에서 EC2를 누르고, 우측 타임프레임을 1시간으로 설정해 줍니다. 이후 잠시 기다리면 CPU Utilization (Percent) 그래프가 변화하는 것을 보실 수 있습니다.\n  5분(300초) 정도 기다린 후 Activity 탭을 눌러 보면, 조정 정책에 따라 EC2 인스턴스를 추가 배치하는 것을 보실 수 있습니다.\n  Instance management 탭을 클릭해 보니, 두 개의 인스턴스가 추가적으로 생겨나 총 4개의 인스턴스가 동작중인 것을 볼 수 있습니다.\n  아까 복사해 둔 ALB DNS를 이용하여 웹 페이지에 접속, 새로 고침을 해 보면 없었던 두 개의 인스턴스에서 웹 페이지를 호스팅하는 것을 확인할 수 있습니다. 새로 생겨난 인스턴스이기 때문에 현재 CPU Load는 0% 입니다. 각각 다른 가용 영역에 생성된 것도 확인 가능합니다.\n  여기까지 웹 서비스에 대한 부하 테스트를 통해 Auto Scaling 그룹이 동작하는 것을 확인하였습니다.\n수동으로 스케일 조정 이제 수동으로 스케일 옵션을 조정하여 한 개의 인스턴스만 Auto Scaling Group에 남겨 두도록 하겠습니다.\n   먼저, EC2 콘솔 좌측의 Auto Scaling Groups를 클릭합니다. 이후 우리가 방금 생성한 Auto Scaling Groups의 Name이 Web-ASG을 클릭합니다.\n  Group details에서 우측 Edit 버튼을 누릅니다.\n  Edit Web-ASG 창에서 Desired capacity와 Minimum capacity, Maximum capacity를 모두 1로 변경하고, Update 버튼을 누릅니다.\n  업데이트된 설정이 적용되었습니다.\n  이후 Activity 탭을 들어가 보면, Desired capacity에 맞게 인스턴스들을 ALB에서 Draining하는 것을 볼 수 있습니다. 실제 Draining이 완료되기까지는 수 분이 소요됩니다.\n  ALB에서 인스턴스 Draining이 완료되면 아래와 같이 Terminate가 이루어집니다.\n  Instance Management 탭으로 들어가 보면, 아래와 같이 인스턴스들이 Terminating 되는 것을 볼 수 있습니다.\n  작업이 완료되면 Activity 탭의 로그가 변경된 것을 볼 수 있습니다.\n  Instance management탭에 들어가 보면 인스턴스가 하나만 남아 있는 것을 볼 수 있습니다.\n  Computing Hands-on Lab 이 모두 끝났습니다. 수고하셨습니다.\n"
},
{
	"uri": "/ko/compute/appendix/",
	"title": "부록 - 추가적인 EC2 개념들",
	"tags": [],
	"description": "",
	"content": " 프리 티어 유지를 위해서 인스턴스 타입을 t2.micro 에서 변경하지 않습니다.\n 새로운 키 쌍(Key Pair) 생성 EC2를 SSH로 접근하기 위해서는 Key Pair를 생성해야 합니다. 다음의 과정은 SSH Key Pair를 생성하는 과정을 설명합니다.\n키 쌍(Key Pairs)는 각 리전(Region)별로 독립적으로 관리됩니다.\n   AWS Management Console에 로그인하고, Amazon EC2 Console 을 여십시오.\n  AWS Management Console 화면 우측 상단의 사용 리전이 여러분이 사용 하고자 의도한 리전이 맞는지 확인하십시오.\n  네트워크 및 보안 항목에 있는 키 페어을 선택하십시오. SSH Key Pair를 관리할 수 있는 페이지가 보여지게 됩니다.\n  새로운 SSH Key Pair를 생성하기 위하여 화면 상단 또는 화면 중간(키 페어가 없는 경우)의 키 페어 생성 버튼을 클릭 하십시오.\n  키 페어 생성 윈도우에서, AWS-ImmersionDay-Lab 형식으로 키 페어 이름을 지정하고 키 페어 생성을 클릭 하십시오. 키페어의 이름은 사용자가 식별하기 쉽도록 목적과 용도에 따라 지정이 가능합니다. PuTTY를 사용하시는 경우(Windows) 파일 형식에서 아래쪽 ppk를 선택해 주시고, 그 외 ssh를 이용하시는 경우(Mac 또는 Linux) 파일 형식을 pem으로 선택해 주십시오.\n  새로운 키 페어가 생성되고, 최초 1회에 한하여 사용자의 PC로 다운로드 됩니다. pem 파일 형식을 선택하셨던 경우, 다운로드 되는 파일 이름은 AWS-ImmersionDay-Lab.pem 입니다. ppk 파일 형식을 선택하셨다면, AWS-ImmersionDay-Lab.ppk 가 다운로드 됩니다.\n  다운로드 된 키 페어 파일을 안전한 위치에 보관하시기 바랍니다.\n  다운로드된 키 페어 파일은 이후 Lab과정에서 생성하는 EC2 인스턴스에 지정하는데 사용됩니다. 또한, 이후 EC2 인스턴스에 로그인하기 위해서도 반드시 필요합니다.\n SSH를 통한 Linux OS 접근 AWS상에서 운영되는 Linux 인스턴스는 일반적인 On-Premise의 Linux에 접근하던 방식과 다른 인증 방식을 기본적으로 사용하고 있습니다. 일반적인 ID + Password 방식의 OS 사용자 인증이 아닌 보안성이 강화된 ID + Private Key/Public Key 방식의 인증을 사용하고 있습니다.\nEC2 인스턴스에 접속할 수 있는 방법은 현재 3가지입니다.\n 키 페어를 이용하여 SSH로 접속하는 방법 Systems Manager의 Session Manager를 이용하여 접속하는 방법 브라우저 기반의 SSH 연결을 이용하여 인스턴스 연결  이번 Module에서는 EC2에 지정된 키 페어를 통하여 앞서 생성한 EC2 인스턴스에 SSH로 접속하는 과정을 실습하겠습니다.\n사용자의 Private Key는 Key Pair 생성과정에서 최초 1회에 한하여 사용자가 Download 할 수 있으며, 배포과정에서 EC2 Linux 인스턴스에는 지정된 Key Pair에 해당하는 Public Key가 설치됩니다. 이후 사용자는 자신만의 Private Key를 이용하여 EC2 Linux 인스턴스에 SSH 인증 및 접속이 가능하게 됩니다.\n접속하는 사용자가 사용하는 운영체제 및 SSH Client Tool의 종류에 따라 사전 준비 작업이 필요할 수 있습니다. 사용자의 단말 운영체제가 Windows기반이고, 사용하는 SSH Client Tool 이 PuTTY인 경우, 초기 키 페어를 생성할 때 .ppk 형태로 다운로드하여 사용하는 것이 편리합니다.\nWindows Laptop 사용자를 위한 PuTTY 사용 방법 AWS는 표준 인증서 포맷인 PEM(Privacy-enhanced Electronic Mail)형식으로 제공되나, Windows Laptop 사용자들이 주로 사용하는 대표적인 Freeware SSH Client인 PuTTY는 PEM 형식 인증서를 직접 지원하지 않고 있습니다.(그 외 대부분의 SSH Client들은 PEM인증서를 기본적으로 지원합니다.)\n따라서, 사용자가 Windows Laptop기반에서 PuTTY를 사용하는 경우, EC2 인스턴스에 SSH 연결을 위하여 PuTTY가 지원하는 PPK(.ppk, PuTTY Private Key Files) 파일 형식으로 Private Key를 다운로드 받아야 합니다.\nPuTTY에서 PPK 인증서를 지정하고 연결하기 PuTTY를 실행하고, 연결할 Host에 ec2-user@EC2_PUBLIC_IP_ADDRESS/FQDN 의 형식으로 지정합니다.\nConnection \u0026gt; SSH \u0026gt; Auth 메뉴의 Private key file for authentication: 항목의 Browse를 선택하여 PPK형식의 인증서 파일(Private Key)을 지정 하십시오. 향후, 접속한 EC2 인스턴스에서 VPC내부의 다른 EC2 인스턴스로 SSH연결을 할 경우, Allow agent forwarding 기능을 선택하십시오.\nOpen을 선택하면, 인증서 Cache여부에 대한 질문 후 SSH Session이 연결 됩니다.\n이제 개인용 인증서(Private Key)를 지정하여 SSH연결이 가능합니다. 기본적인 Linux 명령을 이용하여 OS의 구성 등을 확인하십시오.\n인스턴스 타입의 변경 EBS Volume을 사용하는 EC2 인스턴스는 간단한 절차를 통하여 인스턴스의 타입(CPU/Memory 용량 및 주된 사용 분야에 따라서)을 변경 할 수 있습니다. 본 Lab에서는 필요하지 않으나, 아래와 같은 과정을 통하여 인스턴스의 타입을 사용자가 원하는 유형으로 변경 할 수 있습니다.\nAWS Management Console에서 변경하고자 하는 인스턴스를 선택하고, 마우스 오른쪽 버튼을 클릭하여 인스턴스 상태 하위의 중지 (종료가 아님에 주의하십시오!)를 선택합니다.\n중지될 인스턴스를 확인하고 예, 중지를 선택하십시오.\n인스턴스가 중지되면, 마우스 오른쪽 버튼을 눌러 인스턴스 설정을 선택하고 하위의 인스턴스 유형 변경을 선택하십시오.\n변경하고자 하는 인스턴스의 유형을 선택하고 적용을 클릭 하십시오.\n변경이 완료되면, 인스턴스 상태 하위의 시작을 선택하여 변경된 인스턴스 유형으로 시작합니다.\n"
},
{
	"uri": "/ko/database/",
	"title": "데이터베이스 – Amazon Aurora",
	"tags": [],
	"description": "",
	"content": " AWS에서 사용하실 수 있는 여러 Database 옵션 중, Amazon RDS(Relational Database Service)는 구성과 운영이 간편하고 확장이 손쉬운 클라우드 기반의 데이터베이스 서비스입니다. Amazon RDS는 비용 효율적이고 손쉽게 용량을 조절할 수 있으며, 시간 소모가 많은 관리 작업을 줄여 사용자가 비지니스와 어플리케이션에 보다 집중할 수 있게 합니다.\n Overview 본 Lab은 앞서 수행한 Networking, Computing Lab을 전제로 합니다. 앞선 Lab에서 생성된 Web Instance가 본 Lab에서 생성하는 RDS를 사용하게 됩니다.\n목표 구성도 본 Database Lab은 VPC Lab을 통해 생성한 VPC 내에 RDS Aurora 인스턴스를 배포하고, 이미 생성된 Auto Scaling Group 내 인스턴스의 Web Service(Apache+PHP)가 RDS Aurora(MySQL)를 사용할 수 있도록 구성합니다. 이후 해당 인스턴스를 이용하여 새로운 커스텀 AMI를 생성하고, Auto Scaling Group에서 새로운 AMI를 사용하도록 업데이트합니다. 이후 Web Browser를 통하여 RDS DB에 저장된 단순한 주소록에 연락처를 추가/수정/삭제 하는 테스트를 진행해 봅니다.\n실습 순서 본 Lab은 다음과 같은 순서로 진행됩니다.\n3-1. VPC 보안 그룹 생성 3-2. RDS 인스턴스 생성\n3-3. 웹앱 서버와 RDS 연결\n3-4. 오토 스케일링 그룹 업데이트\n3-5. RDS 관리 기능\n3-6. 도전 과제 - RDS Aurora 연결\n"
},
{
	"uri": "/ko/database/create_sg/",
	"title": "VPC 보안 그룹 생성",
	"tags": [],
	"description": "",
	"content": " RDS 서비스는 EC2와 동일한 보안 모델을 사용합니다. 가장 일반적인 사용 형식은 동일한 VPC내에서 어플리케이션 서버로서 운영중인 EC2인스턴스에 데이터베이스 서버로서 데이터를 제공하거나, VPC외부에 있는 DB 어플리케이션 Client에게 접근이 가능하도록 구성하는 것입니다. 적절한 접근 통제를 위하여 VPC 보안 그룹(Security Group)을 활용해야 합니다.\n 앞선 컴퓨트 – Amazon EC2 실습에서 Launch Template과 Auto Scaling 그룹을 이용하여 웹 서버 EC2 인스턴스들을 생성해 보았습니다. 이 인스턴스들에는 Launch Template을 이용하여 보안 그룹 ASG-Web-Inst-SG 를 적용해 둔 상태입니다. 이 정보들을 이용하여, Auto Scaling 그룹 내의 웹 서버 인스턴스들만RDS 인스턴스에 접속할 수 있도록 보안 그룹을 생성하겠습니다.\n  VPC 대시보드 좌측에서 Security Groups를 선택 후 Create Security Group을 선택하십시오.\n  아래와 같이 Security group name, Description을 입력하고, 해당 그룹을 사용할 VPC를 지정합니다. (VPC-Lab 태깅된 VPC 지정 확인)\n   키 값     Security group name DB-SG   Descripyion Database Security Group   VPC VPC-Lab      스크롤을 내려 Inbound rules란으로 이동합니다. Add rule을 눌러 앞서 Auto Scaling 그룹을 통해 생성한 EC2 Web Server들에서 RDS로의 접근을 허용하는 보안 그룹 정책을 생성합니다. Type 에서 MySQL/Aurora(3306) 을 선택하세요. 프로토콜과 포트 범위가 자동으로 지정됩니다. Source 항목에는 접근을 허용할 IP 대역(CIDR) 또는 접근할 EC2 인스턴스들이 사용하고 있는 다른 보안 그룹을 지정할 수 있습니다. Computing Lab의 Auto Scaling Group의 Web Instance들에 적용되어 있는 보안 그룹(ASG-Web-Inst-SG )을 선택하십시오. 지정이 완료되면 맨 하단의 Create Security Group 을 눌러 보안 그룹을 생성합니다.\n  "
},
{
	"uri": "/ko/database/create_rds/",
	"title": "RDS 인스턴스 생성",
	"tags": [],
	"description": "",
	"content": " RDS에서 사용할 보안 그룹이 생성되었으므로, 이제 RDS Aurora(MySQL 호환) 인스턴스를 생성 하겠습니다.\n AWS Management Console에서 RDS(Relational Database Service) 로 이동하십시오.\n  대시보드에서 Create Database 를 선택하여 RDS 인스턴스의 생성을 시작합니다.\n  사용할 RDS 인스턴스의 데이터베이스 엔진을 선택합니다. Amazon RDS에서는 Open Source기반의 Database 엔진 및 상용 Database 엔진을 선택할 수 있습니다. 본 Lab에서는 Amazon에서 제공하는 MySQL 호환 Database 엔진인 Amazon Aurora 를 사용하겠습니다. 데이터베이스 생성 방식 선택 란에서 Standard Create 을 선택합니다.\nEngine type을 Amazon Aurora로, Version은 Aurora (MySQL)-5.6.10a 을 선택합니다.\n  스크롤을 내려 Template 란으로 이동하고, Production 을 선택합니다.\n  Settings 항목에서는 RDS 인스턴스의 식별을 위한 정보 및 관리자 정보를 지정합니다. 아래의 정보를 입력하세요.\n   키 값     DB cluster identifier rdscluster   Master username awsuser   Master password awspassword      DB instance size 와 Availability \u0026amp; durability 항목이 아래와 같은지 확인합니다. 메모리 최적화 인스턴스 클래스와 다른 가용 영역에 읽기 전용 복제 노드를 구성 하는 것이 기본값으로 설정되어 있습니다.\n  Connectivity 란에서 네트워크 및 보안을 설정합니다. Virtual private cloud (VPC) 란에 앞서 생성한 VPC-Lab을 선택하고, Additional connectivity configuration 을 클릭하여 RDS 인스턴스가 운영될 VPC, 서브넷, VPC 외부로부터의 접근 허용여부 및 보안 그룹을 지정합니다. 아래의 내용대로 설정하시면 됩니다.\n   키 값     Virtual private cloud (VPC) VPC-Lab   Subnet group Create new DB subnet group   Publicly accessible No   VPC security group Choose existing: DB SG (Default의 경우 옆의 X표를 클릭하여 삭제)   데이터베이스 포트 (Database Port) 3306      아래로 스크롤을 내려, Additional configuration 을 클릭합니다. 아래와 같이 데이터베이스 옵션을 설정합니다.\n   키 값     DB instance identifier awsdb   Initial database name immersionday   DB cluster parameter group default.aurora5.6   DB parameter group default.aurora5.6      이후 항목인 Backup, Encryption, Backtrack, Monitoring, Log exports 등 항목은 모두 기본값을 그대로 사용하고, Create database 를 눌러 Database를 생성합니다.\n이제 새로운 RDS 인스턴스가 생성됩니다. 이 작업은 5분이상 소요될 수 있습니다. DB 인스턴스의 상태가 Available 이 되면 RDS 인스턴스를 사용할 수 있습니다.\n  RDS 콘솔에서 좌측 Databases 메뉴를 선택하여, 생성한 RDS DB 인스턴스의 상태가 Available 인지 확인하세요.\n  "
},
{
	"uri": "/ko/database/connect_app/",
	"title": "웹앱 서버와 RDS 연결",
	"tags": [],
	"description": "",
	"content": " 앞선 Lab에서 생성한 Web Server 인스턴스에는 RDS 사용을 위한 단순한 주소록을 생성하는 코드가 포함되어 있습니다. EC2 Web Server에서 RDS를 사용하기 위하여 RDS의 Endpoint URL(DNS FQDN)을 먼저 확인해야 합니다.\n   Amazon RDS 콘솔의 좌측 메뉴에서 Databases를 선택하고, 생성한 RDS Aurora 클러스터의 이름, rdscluster를 선택하십시오. Connectivity \u0026amp; security 탭에서 RDS Aurora의 엔드포인트(Endpoint)를 확인할 수 있습니다. Type이 Writer인 Endpoint name을 복사해 둡니다.\n  VPC Lab에서 생성한 ALB의 DNS 이름을 확인하고, Web Browser로 접속하십시오.\n  위의 메뉴 중 RDS를 선택하여 RDS 연결에 필요한 정보를 입력합니다. RDS 인스턴스 정보에서 복사해 둔 Write Endpoint URL을 입력하고, RDS 인스턴스 생성시 입력한 Database, 사용자 이름 및 암호를 입력한 후 Submit을 선택하십시오.\n   키 값     Endpoint RDS의 Writer endpoint name (ex. rdscluster.cluster-\u0026lt;임의의 번호\u0026gt;.ap-northeast-2.rds.amazonaws.com)   Database immersionday   Username awsuser   Password awspassword      입력한 정보가 정확하다면 자동으로 지정된 Database(immersionday)에 간단한 address라는 테이블이 생성되고, 2개의 Sample Record(Row)가 추가됩니다. 10초를 기다리면 자동으로 화면이 전환됩니다. 추가된 Sample Record가 정상적으로 보여지는지 확인하세요.\n  이제 Web Application Server와 RDS Aurora가 정상적으로 연결되었습니다. PHP로 구성된 Web Page상에서 Edit, Remove 또는 Add Contact Link를 사용하여 RDS 데이터베이스에 데이터를 수정/삭제 및 추가가 가능한지를 확인하십시오. 여기서는 샘플로 아래와 같은 사용자를 추가해 보겠습니다.\n  "
},
{
	"uri": "/ko/database/update_asg/",
	"title": "오토 스케일링 그룹 업데이트",
	"tags": [],
	"description": "",
	"content": " 이제 Aurora를 사용하도록 구성된 웹 인스턴스를 이용, 새로운 커스텀 AMI를 생성해 보겠습니다. 이 새로 만든 커스텀 AMI로 Launch Template 을 업데이트하고, Auto Scaling Group을 이용하여 RDS 연결 정보를 보유한 새 버전의 인스턴스들을 배포할 계획입니다.\n 신규 커스텀 AMI 생성 EC2 콘솔로 들어가 좌측 메뉴에서 Instances를 누르고, ASG-Web-Instance를 선택합니다. 이후 ActionsImageCreate Image를 순차적으로 선택합니다.\nImage name에 Web Server v2를 입력하고, Image description에 LAMP web server AMI with RDS connection config를 입력합니다. 그리고 Create Image 버튼을 클릭합니다.\nEC2 콘솔 좌측 메뉴에서 AMIs를 찾아 클릭합니다. 잠시 기다리면 새로운 커스텀 AMI가 available 상태로 바뀔 겁니다.\nLaunch Template 업데이트 EC2 콘솔 좌측 메뉴에서 Launch Templates를 찾아 선택하고, 우측 화면에서 Web이라는 이름의 Launch template ID를 클릭합니다.\n오른쪽 Actions 메뉴를 누르고, Modify template (Create new version)을 클릭합니다.\nModify Template 메뉴에서 Template version description을 아래와 같이 입력하고, Auto Scaling guidance의 Provide… 에 체크박스를 선택합니다. •\tTemplate version description: Immersion Day Web Instances Template - with RDS connection String\n스크롤을 내려 Launch template contents 의 Amazon machine image (AMI) 란에서 새로 만든 커스텀 AMI를 선택합니다. 검색 창에 Web Server v2를 입력하면 쉽게 찾을 수 있습니다.\n이후 다른 설정들은 그대로 두고, 스크롤을 맨 아래로 내려 Create template version을 클릭합니다. 다음 화면에서 View launch template을 누르고, 가운데 Versions 탭을 선택합니다. 아래와 같은 화면이 나올 겁니다.\n두 개의 버전 중, 방금 생성한 Version 2를 선택하고 Actions  Set default version을 누릅니다.\n이후 화면에서도 Set as default version을 누릅니다.\n이제 Launch template의 Default version이 변경된 것이 보입니다.\n Auto Scaling Group 업데이트 이제 Auto Scaling Group을 업데이트할 차례입니다. EC2 콘솔 좌측 메뉴에서 맨 아래 Auto Scaling Groups을 선택합니다. 생성해 둔 Web-ASG를 선택한 후, Edit 버튼을 누릅니다.\nEdit Web-ASG 화면에서 Desired capacity와 Minimum capacity를 모두 2로 변경합니다.\n아래 Launch template 버전을 확인해 줍니다. Default (2)로 설정되어 있어야 합니다.\n아래로 스크롤을 내려 Advanced configurations 란으로 이동하고, 아래의 Default cooldown을 30 seconds로 변경해 줍니다.\n맨 아래 Update 버튼을 누릅니다. 잠시 기다리면, Auto Scaling Group이 새 Launch Template을 이용하여 새로운 인스턴스를 생성하는 걸 볼 수 있습니다.\n두 개의 인스턴스가 InService인 것을 확인할 수 있습니다. 그런데 버전을 살펴보니 하나는 예전 Launch template 버전(Version 1)으로 만들어진 인스턴스입니다. 이 예전 버전 인스턴스를 수동으로 종료해 보겠습니다. 맨 왼쪽, 인스턴스의 ID(i-xxxxx)를 클릭하여 EC2 인스턴스 콘솔로 들어갑니다.\n새 탭이 뜨고, 종료할 인스턴스가 이미 선택되어 있습니다. Actions  Instance State  Terminate를 눌러 줍니다. 정말 종료하겠냐는 경고 팝업이 뜨면, Yes, Terminate를 누릅니다.\n다시 Auto Scaling Group 메뉴로 들어옵니다. Web-ASG 를 선택하고, 가운데 Instance management 탭을 눌러 보면 현재 3개의 인스턴스가 보입니다. 이를 살펴보면, 수동으로 종료시킨 Version 1 인스턴스가 Terminating 상태이고, 새로이 Version 2 인스턴스가 올라오는 것을 볼 수 있습니다.\n변경이 발생하는 동안 ALB의 DNS를 이용하여 웹 서비스에 접근해 보면, 정상적으로 접근이 되는 것을 볼 수 있습니다.\n인스턴스 추가가 완료되면, 앞서 Computing Lab에서 본 것과 같이 두 개의 인스턴스에 번갈아 접근하게 됩니다. 데모 페이지에서 InstanceId가 변경된다면, Auto Scaling Group 콘솔로 들어가 봅니다. 두 개의 Launch Template Version 2 인스턴스가 정상적으로 동작 중인 것을 확인할 수 있습니다.\n데모 웹 페이지로 돌아와, RDS 버튼을 눌러 보겠습니다. 바로 아래와 같이 접근되며, 아까 수정한 내용 역시 반영된 것을 확인할 수 있습니다.\n자, 여기까지의 작업을 통해 여러분은 고가용성이 보장된 웹 서비스를 구축하였습니다. 지금까지 구성한 인프라 아키텍처는 아래와 같습니다.\n"
},
{
	"uri": "/ko/database/manage_rds/",
	"title": "RDS 관리 기능",
	"tags": [],
	"description": "",
	"content": " 다중 AZ 배포에서 Amazon RDS는 자동으로 서로 다른 가용 영역에 동기식 예비 복제본을 프로비저닝하고 유지합니다. 기본 DB 인스턴스는 가용 영역에서 예비 복제본으로 Sync되어 데이터 이중화를 제공합니다\n RDS 장애 조치(Failover) 테스트 다중 AZ를 활성화한 경우, DB 인스턴스에 계획되거나 계획되지 않은 중단이 발생하면 Amazon RDS는 자동으로 다른 가용 영역에 있는 예비 복제본으로 전환합니다. 장애 조치가 완료되는 데 소요되는 시간은 기본 DB 인스턴스를 사용할 수 없게 된 시점의 데이터베이스 활동 및 기타 조건에 따라 달라집니다. 장애 조치에 소요되는 시간은 일반적으로 60-120초입니다. 그러나 트랜잭션의 규모가 크거나 복구 프로세스가 복잡한 경우 장애 조치에 소요되는 시간이 증가할 수 있습니다. 장애 조치가 완료되면 RDS 콘솔 UI가 새로운 가용 영역에 반영하는 데 추가적으로 시간이 소요됩니다.\n  RDS 관리 콘솔에서 Databases를 선택하고, 장애 조치를 진행할 인스턴스를 선택한 후, 작업 란에서 Failover를 클릭합니다.\n  클러스터를 장애 조치하겠냐는 질문이 나옵니다. Failover 버튼을 누릅니다.\n  리프레시 버튼을 누르면 DB 식별자의 rdscluster의 상태가 Failing-over로 변경됩니다.\n  잠시 후 리프레시 버튼을 눌러 보면, Reader 역할과 Writer 역할이 변경된 것을 보실 수 있습니다. 장애 조치가 완료되었습니다.\n  RDS Snapshot 생성 운영중인 RDS에 대한 Snapshot을 생성하겠습니다. Snapshot은 Database 인스턴스에 대한 백업을 위하여 사용자가 원하는 주기로 생성할 수 있으며, 언제든지 생성된 Snapshot을 기반으로 Database를 복원할 수 있습니다.\n  RDS 관리 콘솔에서 Databases를 선택하고, 작업을 수행할 인스턴스를 선택합니다. 우측 상단 Actions -\u0026gt; Take snapshot 을 선택하십시오.\n  스냅샷에 사용할 이름을 입력합니다. 여기서는 immersionday-snapshot 으로 입력합니다. Take Snapshot 을 눌러 생성을 완료합니다.\n  좌측 RDS 메뉴에서 Snapshots을 선택하고 Snapshot의 생성 상태를 확인해 봅니다. 스냅샷의 상태가 available인 경우, 해당 스냅샷을 이용하여 데이터베이스를 복원할 수 있습니다.\n  원하는 스냅샷을 선택하고 Actions을 선택하면 해당 스냅샷으로 수행 가능한 작업을 확인 할 수 있습니다. Restore Snapshot을 선택하면 작성된 스냅샷을 기반으로 데이터가 동일한 RDS 인스턴스를 생성할 수 있습니다. 이번 Lab에서는 복원은 수행하지 않습니다.\n  RDS 인스턴스 규격 변경 운영중인 RDS 인스턴스의 용량 증설 및 감소(Scale-Up/Scale-Down)는 RDS Management Console을 통하여 매우 간단하게 수행 할 수 있습니다. 변경할 인스턴스를 선택하고 Modify을 선택하여 RDS 인스턴스의 규격을 변경해 보겠습니다.\n  첫번째 항목인 인스턴스 사양에서 인스턴스 클래스 리스트 박스를 선택하여 변경하고자 하는 인스턴스의 규격을 선택할 수 있습니다. 여기선 db.t3.medium 을 선택해 보겠습니다.\n  맨 아래로 스크롤을 내리고 Continue 를 선택하면 아래와 같이 변경 전후의 인스턴스 규격 및 적용 시기를 선택 할 수 있습니다. Apply immediately 를 선택합니다. 이 경우 RDS 에 대한 백업을 수행한 후 RDS의 인스턴스를 즉시 변경합니다. 인스턴스의 종류 및 백업할 데이터의 양에 따라 수분이 소요될 수 있습니다. 따라서, 일정 시간의 RDS 서비스의 중단을 예상해야 합니다. (이중화 구성을 통하여 중단 시간을 최소화 할 수 있습니다.)\n  Apply during the next scheduled maintenance window 을 선택한 경우, 1주일 단위로 지정되어 있는 사용자의 유지관리 시간(Maintenance Window)에 해당 변경 작업을 수행합니다.\n  인스턴스의 status가 Modifying 으로 바뀐 것을 볼 수 있습니다.\n  다시 새로 고침을 눌러보면, Writer 인스턴스가 변경된 것을 볼 수 있습니다. 이는 아까 크기 변경을 위해 선택한 인스턴스가 Writer 인스턴스였기 때문입니다. RDS는 크기 변경 작업 전, Failover를 통해 Downtime을 최소화하도록 합니다.\n  잠시 기다리면, 아래와 같이 Available 상태로 변경이 완료된 것을 볼 수 있습니다.\n  RDS는 언제든지 인스턴스의 크기를 변경할 수 있습니다. 하지만, 데이터베이스의 크기는 확장 후 줄이는(shrink) 것을 지원하지 않습니다.\n "
},
{
	"uri": "/ko/database/challenge_aurora/",
	"title": "도전 과제 - RDS Aurora 연결",
	"tags": [],
	"description": "",
	"content": " 일반적인 Database 관리/운영에 사용되는 MySQL CLI를 통한 RDS 연결을 수행해 보도록 하겠습니다.\n 이를 위해서는,\n VPC-Lab내의 Public Subnet에 만들어 둔 AMI로 EC2 인스턴스를 생성합니다. 이 때, 네트워킹 옵션에서 Public IP를 허용해 주어야 합니다. RDS Aurora의 보안 그룹 설정을 변경해 줍니다. 새로 생성한 EC2 인스턴스의 보안 그룹을 소스로 허용하도록 구성합니다. 방금 생성한 EC2 인스턴스에 SSH로 로그인한 후, MySQL Client를 통하여 RDS Aurora에 접속합니다. EC2 Web Server에는 EC2 배포과정에서 이미 MySQL Client가 설치되어 있습니다.  위 항목을 직접 구성해 보시는 것이 바로 도전 과제가 되겠습니다. 이후 가이드는 아래를 참조해 주세요.\n$ ssh -i AWS-ImmersionDay-Lab.pem ec2-user@”EC2 Host FQDN or IP”\rLast login: Sun Feb 18 14:41:59 2018 from 112.148.83.236\r__| __|_ )\r_| ( / Amazon Linux AMI\r___|\\___|___|\rhttps://aws.amazon.com/amazon-linux-ami/2017.09-release-notes/\r$ mysql -u awsuser -pawspassword -h awsdb.ccjlcjlrtga1.ap-northeast-2.rds.amazonaws.com\rWelcome to the MySQL monitor. Commands end with ; or \\g.\rYour MySQL connection id is 34\rServer version: 5.6.10 MySQL Community Server (GPL)\rType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\rmysql\u0026gt; show databases;\r+--------------------+\r| Database |\r+--------------------+\r| information_schema |\r| immersionday |\r| mysql |\r| performance_schema |\r+--------------------+\r4 rows in set (0.01 sec)\rmysql\u0026gt; use immersionday;\rReading table information for completion of table and column names\rYou can turn off this feature to get a quicker startup with -A\rDatabase changed\rmysql\u0026gt; show tables;\r+------------------------+\r| Tables_in_immersionday |\r+------------------------+\r| address |\r+------------------------+\r1 row in set (0.01 sec)\rmysql\u0026gt; select * from address;\r+----+-------+--------------+---------------------+\r| id | name | phone | email |\r+----+-------+--------------+---------------------+\r| 1 | Bob | 630-555-1254 | bob@fakeaddress.com |\r| 2 | Alice | 571-555-4875 | alice@address2.us |\r+----+-------+--------------+---------------------+\r2 rows in set (0.00 sec)\rmysql\u0026gt;\r"
},
{
	"uri": "/ko/storage/",
	"title": "스토리지 – Amazon S3",
	"tags": [],
	"description": "",
	"content": " Amazon Simple Storage Service(이하 S3)는 언제 어디서나 데이터를 단순하게 처리할 수 있도록 하는 웹 서비스 기반 인터페이스를 제공합니다.\n Overview 본 Hands-On Lab은 사용자가 S3를 이용하여 데이터를 저장, 확인, 이동 및 삭제하는 기능을 익힐 수 있도록 구성되었습니다. 또한 S3의 정적 웹 사이트 호스팅 기능을 이용하여, 간단한 정적 웹 페이지를 호스팅하는 기능도 확인 가능합니다.\n실습 순서 본 Lab은 아래의 순서로 진행합니다.\n4-1. S3에 Bucket 생성\n4-2. 버킷에 오브젝트 추가하기\n4-3. 오브젝트 보기\n4-4. 정적 웹 사이트 호스팅 사용\n4-5. 오브젝트 이동\n4-6. 버킷 버저닝 활성화\n4-7. 오브젝트 및 버킷 삭제\n"
},
{
	"uri": "/ko/storage/create_bucket/",
	"title": "S3 내 Bucket 생성",
	"tags": [],
	"description": "",
	"content": " Amazon S3의 모든 오브젝트(Object)는 버킷(Bucket)내에 저장됩니다. Amazon S3에 데이터를 저장하기 전에 반드시 Bucket을 생성해야 합니다.\n Bucket을 생성하는 것만으로는 비용이 과금 되지 않습니다. Bucket에 Object를 저장하거나 Object를 Bucket으로 전송하거나 외부로 전송하는 것에 대해서만 비용이 과금됩니다.\n   AWS Management Console에서 S3 서비스로 접속 한 후, Create bucket을 눌러 버킷을 생성합니다.\n  버킷 이름 필드에 고유한 버킷 이름을 입력하십시오. 본 Lab에서는 immersion-day-실습사용자이름으로 입력하여 진행합니다. 입력한 버킷 이름은 Amazon S3내에서 중복될 수 없고 유일 해야 합니다. 조직 이름 또는 사용자 이름 등을 반영하여 유일한 버킷 이름을 생성하십시오.\n버킷 이름은 아래의 규칙을 반드시 준수해야 합니다.\n  소문자, 숫자, 점(.) 그리고 대쉬(-)를 포함 할 수 있습니다. 반드시 숫자 또는 문자로 시작해야 합니다. 최소 3자에서 최대 255문자의 길이로 지정이 가능합니다. IP주소와 같은 형식으로 지정할 수 없습니다. (e.g., 265.255.5.4)     버킷이 생성되는 리전에 따라 추가적인 제약이 있을 수 있습니다. 버킷의 이름은 한번 생성하면 변경이 불가능 하며, 버킷 내에 저장된 오브젝트를 지정하기 위하여 URL에 포함됩니다. 생성할 버킷의 이름이 적절한지 확인하시기 바랍니다.\n  Region 드롭-다운 박스에서 버킷을 생성할 리전을 지정하십시오. 본 Lab에서는 Asia Pacific (Seoul) 을 선택합니다.\n  아래 Bucket settings for Block Public Access는 기본값을 사용하고, 하단의 Create bucket를 선택하십시오.\n  Amazon S3에 버킷이 생성되었습니다.\n"
},
{
	"uri": "/ko/storage/put_object/",
	"title": "버킷에 오브젝트 추가하기",
	"tags": [],
	"description": "",
	"content": " 버킷이 정상적으로 생성 되었다면 오브젝트를 추가할 준비가 되었습니다. 오브젝트는 텍스트 파일, 이미지 파일 및 비디오 파일 등 모든 종류의 파일이 될 수 있습니다. Amazon S3에 파일을 추가할 때, 해당 파일에 대한 권한 및 접근 설정 등에 대한 정보를 메타데이터에 포함시킬 수 있습니다.\n   본 Lab에서는 S3를 통해, 정적 웹사이트를 호스팅합니다. 해당 정적 웹사이트는 특정 이미지를 클릭하면 VPC Lab에서 생성한 인스턴스로 리다이렉팅하는 역할을 합니다. 따라서 이미지( 이미지 다운로드 ) 와 생성한 로드밸런서의 DNS 이름을 준비합니다.\n  메모장이나 코드 편집기에 아래의 코드를 입력한 후, 파일 이름을 index.html 로 저장하십시오.\n이 링크 를 클릭하여 실제 구성하는 방법을 참조하세요.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt; AWS General Immersion Day S3 HoL \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt; \u0026lt;br\u0026gt; \u0026lt;h2\u0026gt; Click image to be redirected to the EC2 instance that you created \u0026lt;/h2\u0026gt; \u0026lt;img src=\u0026#34;S3에 업로드될 이미지 접근 URL\u0026#34; onclick=\u0026#34;window.location=\u0026#39;DNS 이름\u0026#39;\u0026#34;/\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Amazon S3 Console에서 오브젝트를 업로드하고자 하는 버킷을 선택하십시오(버킷 아이콘이 아닌 버킷 이름의 링크 클릭). 해당 버킷에 파일(오브젝트)를 업로드 하거나, 하위 폴더(디렉토리)를 만들 수 있습니다. Upload 버튼을 선택하면 업로드 대화상자가 열립니다.\n  Add files를 선택하여 업로드할 파일을 파일 탐색기에서 선택하십시오. 또는 파일을 드래그하여 추가 할 수도 있습니다.\n  HTML 파일을 업로드한 후, 다음 챕터에서 S3 버킷을 웹 사이트 호스팅용으로 구성하겠습니다. 2번에서 생성한 HTML 파일과 이미지를 업로드합니다.\n  Upload 버튼을 누릅니다. 콘솔 화면 아래쪽에 업로드 과정과 결과가 보여집니다.\n  "
},
{
	"uri": "/ko/storage/view_object/",
	"title": "오브젝트 보기",
	"tags": [],
	"description": "",
	"content": " 버킷에 오브젝트를 추가하였으면, 이제 웹 브라우저에서 해당 오브젝트를 확인해 보겠습니다.\n   Amazon S3 Console에서 확인하고자 하는 오브젝트 옆의 체크박스를 선택 하십시오. 아래와 같이 오브젝트에 대한 상세 정보를 확인 할 수 있습니다.\n기본적으로 S3 버킷에 있는 모든 오브젝트는 소유자 전용입니다(Private).\nhttps://{Bucket}.s3.{region}.amazonaws.com/{Object} 와 같은 형식의 URL을 통해 해당 오브젝트를 확인하기 위해서는 외부사용자가 읽을 수 있도록 읽기 권한을 부여해야 합니다. 또는 해당 오브젝트에 대하여 인증 정보가 포함된 시그니처 기반의 Signed URL을 생성하여, 권한이 없는 사용자가 임시적으로 해당 오브젝트에 접근하게 할 수 있습니다.\n  버킷의 Permissions 탭을 선택합니다. Block public access (bucket settings) 의 적용 여부를 수정하기 위해, 오른쪽 Edit 버튼을 누릅니다.\n  맨 위 체크박스를 선택 해제하고 Save 버튼을 누르세요.\n  버킷의 퍼블릭 액세스 차단 편집 팝업 창에서 confirm 을 입력하시고 Confirm 버튼을 누르세요.\n  Overview 탭을 클릭하고, 업로드한 파일들을 선택한 후 Action 드롭 다운 버튼을 클릭하고, Make public 버튼을 눌러서 퍼블릭으로 설정합니다.\n  확인 창이 팝업되면 다시 Make public 버튼을 눌러 확인해줍니다.\n  콘솔에서 index.html을 선택하고, 세부 정보 표시 항목에서 Object URL 링크를 클릭합니다.\n  HTML 오브젝트 파일 객체 URL에 접속 하시면 아래와 같은 화면이 출력됩니다. 또한, 이미지를 클릭 시, 생성한 인스턴스 페이지로 리다이렉트 됩니다.\n"
},
{
	"uri": "/ko/storage/static_web_hosting/",
	"title": "정적 웹 사이트 호스팅 사용",
	"tags": [],
	"description": "",
	"content": " Amazon S3를 이용하여 정적 웹 사이트를 호스팅할 수 있습니다.\n 정적 웹 사이트란, 웹 페이지에 정적 콘텐츠(HTML, 이미지, 비디오) 또는 클라이언트 측 스크립트(Javascript)만을 포함하는 웹 사이트를 가리킵니다. 이와는 대조적으로 동적 웹 사이트의 경우 PHP, JSP 또는 ASP.NET과 같은 서버 측 스크립트를 포함한 서버 측 처리를 필요로 합니다. Amazon S3에서는 서버 측 스크립팅을 지원하지 않습니다. 동적 웹 사이트를 호스팅하고자 하는 경우, AWS의 EC2와 같은 다른 서비스를 사용하면 됩니다.\n   S3 콘솔에서 아까 생성한 버킷을 선택하고, Properties 탭을 클릭합니다.\n  Static website hosting 항목을 클릭하고, index document 란에 index.html을 입력한 뒤, Save 버튼을 누릅니다.\n  다시 Static website hosting 항목을 클릭해 봅니다. 아래 Bucket hosting 항목이 켜져 있는 것을 볼 수 있습니다. 위의 Endpoint URL을 클릭해 정적 웹 사이트로 접속해 봅니다.\n  접속이 잘 됩니다. 이렇게 Amazon S3를 이용하여 정적 웹 사이트를 호스팅할 수 있습니다. 이를 통해 최종적으로 구성하게 된 서비스 아키텍쳐는 아래와 같습니다:\n"
},
{
	"uri": "/ko/storage/move_object/",
	"title": "오브젝트 이동",
	"tags": [],
	"description": "",
	"content": " 지금까지의 과정에서 버킷에 오브젝트를 추가하고 이를 확인하는 기능을 확인했습니다. 이제, 오브젝트를 다른 버킷이나 폴더로 이동하는 기능을 확인하겠습니다.\n   버킷 간 오브젝트 이동을 위하여 임시 버킷을 생성하십시오. (버킷 이름 : 기존생성버킷명-temp)\n 빠른 구성을 위하여 Block all public access 체크 박스를 해제 하십시오. 아래의 알림 창에 체크하시고, Create bucket를 선택하십시오.    Amazon S3 Console에서 오브젝트가 있는 버킷(처음 생성한 버킷)을 선택하고 이동하고자 하는 오브젝트의 체크박스를 클릭하십시오.\n상단의 Actions 메뉴를 선택하면 해당 오브젝트에 대하여 수행할 수 있는 다양한 기능들을 확인할 수 있습니다. 나열된 기능들 중 Move 을 선택합니다.\n  오브젝트를 이동시키고자 하는 버킷을 선택한 후, 원본(소스) 버킷과 대상(도착) 버킷을 확인하고 Move 를 선택하십시오.\n  대상 버킷에서 오브젝트가 이동한 것을 확인하세요.\n오브젝트를 이동시키더라도 기존에 설정된 권한은 그대로 유지됩니다.\n "
},
{
	"uri": "/ko/storage/enable_versioning/",
	"title": "버킷 버저닝 활성화",
	"tags": [],
	"description": "",
	"content": " 동일한 버킷 내에 기존 파일을 최신 버전으로 갱신하지만, 기존 버전도 유지하고 싶은 경우 버킷 버저닝(Bucket Versioning) 을 사용 할 수 있습니다.\n   Amazon S3 Console에서 버저닝을 활성화 하고자 하는 버킷을 선택하고 Properties 메뉴를 선택하십시오. Versioning 을 선택한 후, Enable versioning 라디오 버튼을 클릭하고 Save 를 누릅니다. 버전 관리가 활성화됩니다.\n  편집 가능한 파일을 선택하여 버저닝 기능이 활성화된 원본 파일을 일부 수정하여 저장 하고, 수정된 파일을 다시 버킷에 업로드 하십시오.\n  변경된 파일의 업로드가 완료되면, S3 Console에서 해당 오브젝트를 선택하면 오브젝트에 대한 상세 정보가 나타나고, Latest version 드롭다운 박스를 확인 할 수 있습니다. 드롭다운 박스를 선택하면 아래와 같이 모든 버전의 파일이 확인되고, 선택하여 다운로드 할 수 있습니다.\n  "
},
{
	"uri": "/ko/storage/delete_bucket/",
	"title": "오브젝트 및 버킷 삭제",
	"tags": [],
	"description": "",
	"content": " 불필요한 비용을 막기 위하여 불필요한 오브젝트 및 버킷을 삭제할 수 있습니다.\n   Amazon S3 Console에서 삭제하고자 하는 오브젝트가 있는 버킷을 선택하고 해당 오브젝트를 선택합니다. Actions 메뉴를 선택하고 Delete 를 클릭 하십시오. 삭제를 위한 대화 상자가 나타납니다.\n  Delete 를 선택하면 해당 오브젝트가 삭제됩니다.\n  S3 Console에서 삭제하고자 하는 버킷을 선택하고 Delete 를 선택하여 해당 버킷을 삭제할 수 있습니다. 버킷의 삭제를 위하여 대화 상자에서 다시 한번 삭제하고자 하는 버킷의 이름을 입력하고 Delete bucket 을 누릅니다.\n  만약 버킷 내에 오브젝트가 저장되어 있는 경우, 아래와 같이 삭제할 수 없다는 경고 창이 나옵니다.\n  버킷 내의 모든 오브젝트를 한번에 삭제하고자 하는 경우, Empty 기능을 이용할 수 있습니다. S3 콘솔에서 비우고자 하는 버킷을 선택하고 Empty 버튼을 누릅니다.\n  다음과 같이 확인 창이 뜹니다. 버킷 이름을 입력하고 Empty 버튼을 누릅니다.\n  버킷이 다 비워졌습니다. Exit 버튼을 눌러 콘솔 화면으로 돌아갑니다.\n  버킷을 삭제하고자 하는 경우, 위의 내용대로 다시 삭제를 진행하면 됩니다.\n  "
},
{
	"uri": "/ko/cleanup/",
	"title": "실습 리소스 정리",
	"tags": [],
	"description": "",
	"content": " 이 실습을 마치면 사용한 AWS 계정에 비용이 추가로 발생하지 않도록 사용한 리소스를 삭제해야 합니다. 리소스를 삭제하기 위해 기존의 Administrator (관리자) 계정으로 AWS 관리 콘솔에 로그인 합니다.\n "
},
{
	"uri": "/ko/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/ko/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/ko/credits/",
	"title": "크레딧",
	"tags": [],
	"description": "",
	"content": "패키지와 라이브러리  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  도구  Netlify - Continuous deployement and hosting of this documentation Hugo   제작: Daniel You\n"
}]